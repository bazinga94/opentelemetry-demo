name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push-all:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        run: |
          echo "IMAGE_NAME=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}" >> .env
          echo "DEMO_VERSION=${{ github.run_number }}" >> .env

      - name: Build all service images
        run: docker compose --env-file .env build

      - name: Push all service images
        run: docker compose --env-file .env push

      # - name: Install Trivy
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install wget apt-transport-https gnupg lsb-release -y
      #     wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      #     echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
      #     sudo apt-get update
      #     sudo apt-get install trivy -y

      # - name: Scan all service images with Trivy
      #   run: |
      #     ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
      #     VERSION=${{ github.run_number }}
      #     for svc in frontend checkout payment recommendation email currency product-catalog shipping ad cart accounting fraud-detection quote image-provider load-generator flagd-ui kafka; do
      #       echo "Scanning $svc..."
      #       IMAGE=${ECR_URI}:${svc}-${VERSION}
      #       trivy image --exit-code 0 --severity HIGH,CRITICAL $IMAGE
      #     done

      # - name: Set up kubeconfig
      #   run: |
      #     mkdir -p ~/.kube
      #     echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > ~/.kube/config

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Update image tags in 07-deployments.yaml
        run: |
          VERSION=${{ github.run_number }}
          ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
          FILE=k8s/07-deployments.yaml
          for svc in frontend checkout payment recommendation email currency shipping ad cart accounting quote product-catalog image-provider fraud-detection flagd-ui kafka; do
            sed -i "s|image: .*${svc}.*|image: ${ECR_URI}:${svc}-${VERSION}|" $FILE
          done
      
      - name: Update image tags in 12-prob-deployments.yaml
        run: |
          VERSION=${{ github.run_number }}
          ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
          FILE=k8s/12-deployments.yaml
          for svc in frontend-proxy load-generator; do
            sed -i "s|image: .*${svc}.*|image: ${ECR_URI}:${svc}-${VERSION}|" $FILE
          done

      # - name: Update image tags in 07-deployments.yaml
      #   run: |
      #     VERSION=${{ github.run_number }}
      #     ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
      #     FILE=k8s/07-deployments.yaml
      #     for svc in frontend-proxy product-catalog image-provider fraud-detection load-generator flagd-ui frontend checkout payment recommendation email currency shipping ad cart accounting quote kafka; do
      #       sed -i "s|image: .*${svc}.*|image: ${ECR_URI}:${svc}-35|" $FILE
      #     done
      - name: Commit and push updated deployments file
        run: |
          git config --global user.name "arbaaz29"
          git config --global user.email "arbazij@gmail.com"
          git add k8s/.
          git commit -m "Update image tags in 07-deployments.yaml for run ${{ github.run_number }}"
          git push

      # - name: Update image tags in 07-deployments.yaml(Failure)
      #   run: |
      #     ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
      #     FILE=k8s/07-deployments.yaml
      #      for svc in frontend checkout payment email currency product-catalog shipping ad cart accounting fraud-detection quote image-provider load-generator flagd-ui kafka; do
      #       sed -i "s|image: .*${svc}.*|image: ${ECR_URI}:${svc}-${{ github.sha }}|" $FILE
      #     done

      #     sed -i "s|image: .*recommendation.*|image: ${ECR_URI}:recommendation-INVALIDTAG|" $FILE

      - name: Creating namespace
        run: |
          kubectl apply -f k8s/01-namespace.yaml

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/

      # Rollback
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back to previous stable versions..."
          for svc in frontend checkout payment recommendation email currency product-catalog shipping ad cart accounting fraud-detection quote image-provider load-generator flagd-ui kafka; do
            echo "Rolling back $svc"
            kubectl rollout undo deployment/$svc || echo "Rollback failed for $svc (may not exist)"
          done
