# when using certificates to secure data in transit, use route53 to add certificate and alb to your domain so that the certificate and requests are resolved properly
# if you forget to do so, you won't be able to access your application with or without http

# need to add to route53
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: otel-demo-alb-ingress
  namespace: default
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/load-balancer-name: eks-alb-only-ssl
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:588738579349:certificate/505b0098-3d01-4c70-b7cc-65fbf10b4717
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/group.name: otel-demo
    # alb.ingress.kubernetes.io/healthcheck-path: /healthz
    # alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=60
    # alb.ingress.kubernetes.io/subnets: subnet-0498eccef62fbed04,subnet-026507741e32f854a   # comma-separated subnet IDs
    # alb.ingress.kubernetes.io/security-groups: sg-0aa03d918a9b241b7 # security group ID for the ALB
    # alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-proxy
                port:
                  number: 8080

---
# need to add to route53
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alb-ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:588738579349:certificate/505b0098-3d01-4c70-b7cc-65fbf10b4717
    alb.ingress.kubernetes.io/load-balancer-name: eks-alb-with-redirect
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: >
     {"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301" }}
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  labels:
    app: alb-ingress-controller
spec:
  # ingress.class: alb
  rules:
    - host: finals.spring-e-commerce.academy
      http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: ssl-redirect
                port:
                  name: use-annotation
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: frontend-proxy
                port:
                  number: 8080

---
# no need to add to route53
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: otel-demo-alb-ingress
  namespace: default
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/load-balancer-name: eks-alb-only-http
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    # alb.ingress.kubernetes.io/group.name: otel-demo
    # alb.ingress.kubernetes.io/healthcheck-path: /healthz
    # alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=60
    # alb.ingress.kubernetes.io/subnets: subnet-0498eccef62fbed04,subnet-026507741e32f854a   # comma-separated subnet IDs
    # alb.ingress.kubernetes.io/security-groups: sg-0aa03d918a9b241b7 # security group ID for the ALB
    # alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-proxy
                port:
                  number: 8080